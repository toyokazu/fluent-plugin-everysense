<source>
  # fluent-plugin-everysense の input plugin を指定します．
  @type everysense
  tag location1.everystamp
  # ここではラベルを用いていますが，tagを用いることもできます．
  @label @everystamp
  # EverySense Serverのアカウント名を指定してください．
  login_name username
  # EverySense Serverのアカウントパスワードを指定してください．
  password XXXXXXXXXXXX
  # EverySense Server上に作成したレシピのレシピIDを指定してください．
  recipe_id XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX
  # 取得間隔は変更可能です．
  polling_interval 30
  # 現状JSONフォーマットのみ対応しています．
  format json
  <parse>
    @type json
  </parse>
</source>

<label @everystamp>
  # fluent-plugin-everysense の filter plugin で複数センサの情報を同時に取得した場合にfluentd上の複数イベントに変換します．
  <filter location1.*>
    @type everysense
  </filter>
  # EverySense Serverの出力をElasticSearchのmappingの形式に変換します．
  # センサごとの変換ロジックが必要ですが，ここではEveryStamp, EveryPostで
  # 利用可能なセンサについて変換例を示しています．
  <filter location1.*>
    @type record_transformer
    enable_ruby true
    auto_typecast true
    <record>
      timestamp   ${Time.parse(record["data"]["at"]).utc.strftime("%Y-%m-%d %H:%M:%S")}
      accelerometer     ${if record["data_class_name"] == "Accelerometer" then return {"x": record["data"]["values"][0], "y": record["data"]["values"][1], "z": record["data"]["values"][2]} end}
      air_hygrometer   ${if record["data_class_name"] == "AirHygrometer" then return record["data"]["value"] end}
      air_temperature   ${if record["data_class_name"] == "AirTemperature" then return record["data"]["value"] end}
      angular_velocity    ${if record["data_class_name"] == "AngularVelocity" then return {"x": record["data"]["values"][0], "y": record["data"]["values"][1], "z": record["data"]["values"][2]} end}
      barometric_pressure   ${if record["data_class_name"] == "BarometricPressure" then return record["data"]["value"] end}
      environmental_sound   ${if record["data_class_name"] == "EnvironmentalSound" then return record["data"]["values"] end}
      earth_magnetometer    ${if record["data_class_name"] == "EarthMagnetometer" then return {"x": record["data"]["values"][0], "y": record["data"]["values"][1], "z": record["data"]["values"][2]} end}
      illuminance   ${if record["data_class_name"] == "Illuminance" then return record["data"]["value"] end}
      location    ${if record["data_class_name"] == "Location" then if record["data"]["location"].nil? then return {"lon": record["data"]["values"][0], "lat": record["data"]["values"][1]} else return {"lon": record["data"]["location"]["longitude"], "lat": record["data"]["location"]["latitude"]} end end}
      motion_activity ${if record["data_class_name"] == "MotionActivity" then return record["data"]["value"] end}
      switch    ${if record["data_class_name"] == "Switch" then if record["data"]["value"] == "true" then return true else return false end end}
      uv_figure   ${if record["data_class_name"] == "UV_Figure" then return record["data"]["value"] end}
    </record>
  </filter>
  # デバッグ用に標準出力だけで確認したい場合は以下を有効にしてください．
  #<match location1.*>
  #  @type stdout
  #</match>
  # ElasticSearchに格納しながら，標準出力でも格納された内容を確認したい
  # 場合は，以下でコメントアウトされている箇所を有効にしてください．
  <match location1.*>
    #@type copy
    #<store>
      @type elasticsearch
      # ElasticSearchを立ち上げたホストを指定してください．
      host localhost
      port 9200
      index_name everysense
      type_name everystamp
      logstash_format false
      include_tag_key true
      time_key data.at
      flush_interval 30s
    #</store>
    #<store>
    #  @type stdout
    #</store>
  </match>
</label>
